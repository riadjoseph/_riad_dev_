{"version":3,"file":"QuestionTypes.jsx","sourceRoot":"","sources":["../../../../../src/extensions/surveys/components/QuestionTypes.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Fragment } from 'preact'\nimport { useMemo, useRef, useState } from 'preact/hooks'\nimport {\n    BasicSurveyQuestion,\n    LinkSurveyQuestion,\n    MultipleSurveyQuestion,\n    RatingSurveyQuestion,\n    SurveyAppearance,\n    SurveyQuestionType,\n} from '../../../posthog-surveys-types'\nimport { isArray, isNull, isNumber, isString } from '../../../utils/type-utils'\nimport {\n    checkSVG,\n    dissatisfiedEmoji,\n    neutralEmoji,\n    satisfiedEmoji,\n    veryDissatisfiedEmoji,\n    verySatisfiedEmoji,\n} from '../icons'\nimport { getDisplayOrderChoices, useSurveyContext } from '../surveys-extension-utils'\nimport { BottomSection } from './BottomSection'\nimport { QuestionHeader } from './QuestionHeader'\n\nexport interface CommonQuestionProps {\n    forceDisableHtml: boolean\n    appearance: SurveyAppearance\n    onSubmit: (res: string | string[] | number | null) => void\n    onPreviewSubmit: (res: string | string[] | number | null) => void\n    initialValue?: string | string[] | number | null\n}\n\nexport function OpenTextQuestion({\n    question,\n    forceDisableHtml,\n    appearance,\n    onSubmit,\n    onPreviewSubmit,\n    initialValue,\n}: CommonQuestionProps & {\n    question: BasicSurveyQuestion\n}) {\n    const [text, setText] = useState<string>(() => {\n        if (isString(initialValue)) {\n            return initialValue\n        }\n        return ''\n    })\n\n    return (\n        <Fragment>\n            <div className=\"question-container\">\n                <QuestionHeader\n                    question={question.question}\n                    description={question.description}\n                    descriptionContentType={question.descriptionContentType}\n                    forceDisableHtml={forceDisableHtml}\n                />\n                <textarea\n                    rows={4}\n                    placeholder={appearance?.placeholder}\n                    onInput={(e) => {\n                        setText(e.currentTarget.value)\n                        e.stopPropagation()\n                    }}\n                    onKeyDown={(e) => {\n                        e.stopPropagation()\n                    }}\n                    value={text}\n                />\n            </div>\n            <BottomSection\n                text={question.buttonText || 'Submit'}\n                submitDisabled={!text && !question.optional}\n                appearance={appearance}\n                onSubmit={() => onSubmit(text)}\n                onPreviewSubmit={() => onPreviewSubmit(text)}\n            />\n        </Fragment>\n    )\n}\n\nexport function LinkQuestion({\n    question,\n    forceDisableHtml,\n    appearance,\n    onSubmit,\n    onPreviewSubmit,\n}: CommonQuestionProps & {\n    question: LinkSurveyQuestion\n}) {\n    return (\n        <Fragment>\n            <div className=\"question-container\">\n                <QuestionHeader\n                    question={question.question}\n                    description={question.description}\n                    descriptionContentType={question.descriptionContentType}\n                    forceDisableHtml={forceDisableHtml}\n                />\n            </div>\n            <BottomSection\n                text={question.buttonText || 'Submit'}\n                submitDisabled={false}\n                link={question.link}\n                appearance={appearance}\n                onSubmit={() => onSubmit('link clicked')}\n                onPreviewSubmit={() => onPreviewSubmit('link clicked')}\n            />\n        </Fragment>\n    )\n}\n\nexport function RatingQuestion({\n    question,\n    forceDisableHtml,\n    displayQuestionIndex,\n    appearance,\n    onSubmit,\n    onPreviewSubmit,\n    initialValue,\n}: CommonQuestionProps & {\n    question: RatingSurveyQuestion\n    displayQuestionIndex: number\n}) {\n    const scale = question.scale\n    const starting = question.scale === 10 ? 0 : 1\n    const [rating, setRating] = useState<number | null>(() => {\n        if (isNumber(initialValue)) {\n            return initialValue\n        }\n        if (isArray(initialValue) && initialValue.length > 0 && isNumber(parseInt(initialValue[0]))) {\n            return parseInt(initialValue[0])\n        }\n        if (isString(initialValue) && isNumber(parseInt(initialValue))) {\n            return parseInt(initialValue)\n        }\n        return null\n    })\n\n    const { isPreviewMode } = useSurveyContext()\n\n    const handleSubmit = (num: number) => {\n        if (isPreviewMode) {\n            return onPreviewSubmit(num)\n        }\n        return onSubmit(num)\n    }\n\n    return (\n        <Fragment>\n            <div className=\"question-container\">\n                <QuestionHeader\n                    question={question.question}\n                    description={question.description}\n                    descriptionContentType={question.descriptionContentType}\n                    forceDisableHtml={forceDisableHtml}\n                />\n                <div className=\"rating-section\">\n                    <div className=\"rating-options\">\n                        {question.display === 'emoji' && (\n                            <div className=\"rating-options-emoji\">\n                                {(question.scale === 3 ? threeScaleEmojis : fiveScaleEmojis).map((emoji, idx) => {\n                                    const active = idx + 1 === rating\n                                    return (\n                                        <button\n                                            aria-label={`Rate ${idx + 1}`}\n                                            className={`ratings-emoji question-${displayQuestionIndex}-rating-${idx} ${\n                                                active ? 'rating-active' : ''\n                                            }`}\n                                            value={idx + 1}\n                                            key={idx}\n                                            type=\"button\"\n                                            onClick={() => {\n                                                const response = idx + 1\n                                                setRating(response)\n                                                if (question.skipSubmitButton) {\n                                                    handleSubmit(response)\n                                                }\n                                            }}\n                                        >\n                                            {emoji}\n                                        </button>\n                                    )\n                                })}\n                            </div>\n                        )}\n                        {question.display === 'number' && (\n                            <div\n                                className=\"rating-options-number\"\n                                style={{ gridTemplateColumns: `repeat(${scale - starting + 1}, minmax(0, 1fr))` }}\n                            >\n                                {getScaleNumbers(question.scale).map((number, idx) => {\n                                    const active = rating === number\n                                    return (\n                                        <RatingButton\n                                            key={idx}\n                                            displayQuestionIndex={displayQuestionIndex}\n                                            active={active}\n                                            appearance={appearance}\n                                            num={number}\n                                            setActiveNumber={(response) => {\n                                                setRating(response)\n                                                if (question.skipSubmitButton) {\n                                                    handleSubmit(response)\n                                                }\n                                            }}\n                                        />\n                                    )\n                                })}\n                            </div>\n                        )}\n                    </div>\n                    <div className=\"rating-text\">\n                        <div>{question.lowerBoundLabel}</div>\n                        <div>{question.upperBoundLabel}</div>\n                    </div>\n                </div>\n            </div>\n            <BottomSection\n                text={question.buttonText || appearance?.submitButtonText || 'Submit'}\n                submitDisabled={isNull(rating) && !question.optional}\n                appearance={appearance}\n                onSubmit={() => onSubmit(rating)}\n                onPreviewSubmit={() => onPreviewSubmit(rating)}\n                skipSubmitButton={question.skipSubmitButton}\n            />\n        </Fragment>\n    )\n}\n\nexport function RatingButton({\n    num,\n    active,\n    displayQuestionIndex,\n    setActiveNumber,\n}: {\n    num: number\n    active: boolean\n    displayQuestionIndex: number\n    appearance: SurveyAppearance\n    setActiveNumber: (num: number) => void\n}) {\n    return (\n        <button\n            aria-label={`Rate ${num}`}\n            className={`ratings-number question-${displayQuestionIndex}-rating-${num} ${active ? 'rating-active' : ''}`}\n            type=\"button\"\n            onClick={() => {\n                setActiveNumber(num)\n            }}\n        >\n            {num}\n        </button>\n    )\n}\n\nfunction isSubmitDisabled(\n    selectedChoices: string | string[] | null,\n    openChoiceSelected: boolean,\n    openEndedInput: string,\n    optional: boolean\n): boolean {\n    if (optional) {\n        return false\n    }\n\n    if (isNull(selectedChoices)) {\n        return true\n    }\n\n    if (isArray(selectedChoices)) {\n        if (!openChoiceSelected && selectedChoices.length === 0) {\n            return true\n        }\n        if (openChoiceSelected && !openEndedInput && selectedChoices.length === 0) {\n            return true\n        }\n    }\n\n    return false\n}\n\nexport function MultipleChoiceQuestion({\n    question,\n    forceDisableHtml,\n    displayQuestionIndex,\n    appearance,\n    onSubmit,\n    onPreviewSubmit,\n    initialValue,\n}: CommonQuestionProps & {\n    question: MultipleSurveyQuestion\n    displayQuestionIndex: number\n}) {\n    const openChoiceInputRef = useRef<HTMLInputElement>(null)\n    const choices = useMemo(() => getDisplayOrderChoices(question), [question])\n    const [selectedChoices, setSelectedChoices] = useState<string | string[] | null>(() => {\n        if (isString(initialValue)) {\n            return initialValue\n        }\n        if (isArray(initialValue)) {\n            return initialValue\n        }\n        return question.type === SurveyQuestionType.SingleChoice ? null : []\n    })\n    const [openChoiceSelected, setOpenChoiceSelected] = useState(() => {\n        if (isString(initialValue)) {\n            return !choices.includes(initialValue)\n        }\n        if (isArray(initialValue)) {\n            // check if initialValue IS NOT in choices\n            return !choices.some((choice) => initialValue.includes(choice))\n        }\n        return false\n    })\n    const [openEndedInput, setOpenEndedInput] = useState(() => {\n        if (isString(initialValue) && !choices.includes(initialValue)) {\n            return initialValue\n        }\n        if (isArray(initialValue)) {\n            return initialValue.find((choice) => !choices.includes(choice)) || ''\n        }\n        return ''\n    })\n    const { isPreviewMode } = useSurveyContext()\n\n    const inputType = question.type === SurveyQuestionType.SingleChoice ? 'radio' : 'checkbox'\n    const shouldSkipSubmit =\n        question.skipSubmitButton && question.type === SurveyQuestionType.SingleChoice && !question.hasOpenChoice\n\n    const handleChoiceChange = (val: string, isOpenChoice: boolean) => {\n        if (isOpenChoice) {\n            setOpenChoiceSelected(!openChoiceSelected)\n            // Focus the input when open choice is selected\n            if (!openChoiceSelected) {\n                // Use a small delay to ensure the focus happens after the state update\n                setTimeout(() => openChoiceInputRef.current?.focus(), 0)\n            }\n            return\n        }\n\n        if (question.type === SurveyQuestionType.SingleChoice) {\n            setSelectedChoices(val)\n            setOpenChoiceSelected(false) // Deselect open choice when selecting another option\n            if (shouldSkipSubmit) {\n                onSubmit(val)\n                if (isPreviewMode) {\n                    onPreviewSubmit(val)\n                }\n            }\n            return\n        }\n\n        if (question.type === SurveyQuestionType.MultipleChoice && isArray(selectedChoices)) {\n            if (selectedChoices.includes(val)) {\n                setSelectedChoices(selectedChoices.filter((choice) => choice !== val))\n            } else {\n                setSelectedChoices([...selectedChoices, val])\n            }\n        }\n    }\n\n    const handleOpenEndedInputChange = (e: React.FormEvent<HTMLInputElement>) => {\n        e.stopPropagation()\n        setOpenEndedInput(e.currentTarget.value)\n        if (question.type === SurveyQuestionType.SingleChoice) {\n            setSelectedChoices(e.currentTarget.value)\n        }\n    }\n\n    return (\n        <Fragment>\n            <div className=\"question-container\">\n                <QuestionHeader\n                    question={question.question}\n                    description={question.description}\n                    descriptionContentType={question.descriptionContentType}\n                    forceDisableHtml={forceDisableHtml}\n                />\n                <div className=\"multiple-choice-options limit-height\">\n                    {choices.map((choice: string, idx: number) => {\n                        const isOpenChoice = !!question.hasOpenChoice && idx === question.choices.length - 1\n                        const choiceClass = `choice-option${isOpenChoice ? ' choice-option-open' : ''}`\n\n                        const isChecked = isOpenChoice\n                            ? openChoiceSelected\n                            : question.type === SurveyQuestionType.SingleChoice\n                              ? selectedChoices === choice\n                              : isArray(selectedChoices) && selectedChoices.includes(choice)\n\n                        return (\n                            <div className={choiceClass} key={idx}>\n                                <input\n                                    type={inputType}\n                                    id={`surveyQuestion${displayQuestionIndex}Choice${idx}`}\n                                    name={`question${displayQuestionIndex}`}\n                                    checked={isChecked}\n                                    onClick={() => handleChoiceChange(choice, isOpenChoice)}\n                                />\n                                <label htmlFor={`surveyQuestion${displayQuestionIndex}Choice${idx}`}>\n                                    {isOpenChoice ? (\n                                        <>\n                                            <span>{choice}:</span>\n                                            <input\n                                                type=\"text\"\n                                                ref={openChoiceInputRef}\n                                                id={`surveyQuestion${displayQuestionIndex}Choice${idx}Open`}\n                                                name={`question${displayQuestionIndex}`}\n                                                value={openEndedInput}\n                                                onKeyDown={(e) => {\n                                                    e.stopPropagation()\n                                                }}\n                                                onInput={(e) => handleOpenEndedInputChange(e)}\n                                                onClick={(e) => {\n                                                    // Ensure the checkbox/radio gets checked when clicking the input\n                                                    if (!openChoiceSelected) {\n                                                        handleChoiceChange(choice, true)\n                                                    }\n                                                    e.stopPropagation()\n                                                }}\n                                            />\n                                        </>\n                                    ) : (\n                                        choice\n                                    )}\n                                </label>\n                                <span className=\"choice-check\">{checkSVG}</span>\n                            </div>\n                        )\n                    })}\n                </div>\n            </div>\n            <BottomSection\n                text={question.buttonText || 'Submit'}\n                submitDisabled={isSubmitDisabled(\n                    selectedChoices,\n                    openChoiceSelected,\n                    openEndedInput,\n                    !!question.optional\n                )}\n                appearance={appearance}\n                onSubmit={() => {\n                    if (openChoiceSelected && question.type === SurveyQuestionType.MultipleChoice) {\n                        if (isArray(selectedChoices)) {\n                            onSubmit([...selectedChoices, openEndedInput])\n                        }\n                    } else {\n                        onSubmit(selectedChoices)\n                    }\n                }}\n                onPreviewSubmit={() => {\n                    if (openChoiceSelected && question.type === SurveyQuestionType.MultipleChoice) {\n                        if (isArray(selectedChoices)) {\n                            onPreviewSubmit([...selectedChoices, openEndedInput])\n                        }\n                    } else {\n                        onPreviewSubmit(selectedChoices)\n                    }\n                }}\n                skipSubmitButton={shouldSkipSubmit}\n            />\n        </Fragment>\n    )\n}\n\nconst threeScaleEmojis = [dissatisfiedEmoji, neutralEmoji, satisfiedEmoji]\nconst fiveScaleEmojis = [veryDissatisfiedEmoji, dissatisfiedEmoji, neutralEmoji, satisfiedEmoji, verySatisfiedEmoji]\nconst fiveScaleNumbers = [1, 2, 3, 4, 5]\nconst sevenScaleNumbers = [1, 2, 3, 4, 5, 6, 7]\nconst tenScaleNumbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nfunction getScaleNumbers(scale: number): number[] {\n    switch (scale) {\n        case 5:\n            return fiveScaleNumbers\n        case 7:\n            return sevenScaleNumbers\n        case 10:\n            return tenScaleNumbers\n        default:\n            return fiveScaleNumbers\n    }\n}\n"]}